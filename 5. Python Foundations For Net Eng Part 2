python lists:
    list is a data type containing a sequence of comma-separated objects (elements) within square brackets. Lists have several important characteristics to be aware of when just staring out:
        Lists contain one or more objects in an ordered list
        A given list can contain one or more data types. There is not a requirement that all elements in a list are the same data type
        Items are indexed starting at zero (starting from left)and ends at the length of the list minus one
        Lists are mutable which means individual elements can be modified, in contrast to strings, which is not
                >>> a = ['1', '3', '5']
                >>> a[0]
                '1'
                >>> a[-1]
                '5'
                >>> a[-2]
                '3'
                >>> a[-3
                ...
                ... ]
                '1'
                >>> a[1] = '0'
                >>> print a
                ['1', '0', '5']

Working with lists built-in methods:
        >>> devices = ['asa', 'nexus', 'asa']
        >>> devices.append('aci')
        >>> print devices
        ['asa', 'nexus', 'asa', 'aci']
        >>> devices.insert(0, 'asr')
        >>> print devices
        ['asr', 'asa', 'nexus', 'asa', 'aci']
        >>> devices
        ['asr', 'asa', 'nexus', 'asa', 'aci']
        >>> devices.pop()
        'aci'
        >>> devices.pop()
        'asa'
        >>> devices.pop()
        'nexus'
        >>> devices
        ['asr', 'asa']
        >>> devices.count('asa')
        1
        >>> devices.sort()
        >>> devices
        ['asa', 'asr']

Note: Just as you saw with strings, you can use the dir() function to see the available methods and attributes of lists. You can do dir(list) or dir(var) where var is a list to try it out
Note: the pop method is unique that is returns data and modifies the original object

Dictionaries:
    Contains one or more items and is an unordered list
    Item is a key-value pair
    Indexed by name/key
    Mutable â€“ individual elements can be modified
    Uses curly braces {}
    This data type allows you to store contextual information with keys you define as compared to lists, which are ordered and use an integer as an index
        >>> facts = {'hostname': 'nxos1', 'os': '7.0.3'}
        >>>
        >>> print facts['hostname']
        nxos1
        >>>
        >>> print facts['os']
        7.0.3
        >>>
        >>> facts['os'] = '7.0.2'
        >>>
        >>> print facts
        {'hostname': 'nxos1', 'os': '7.0.2'}
        >>>
        >>> device_facts = {}

Working with dictionaries built-in methods:
    >>> facts = {'hostname': 'nxos1', 'os': '7.0.3'}
    >>>
    >>> facts.update({'vendor': 'cisco', 'platform': '9396'})
    >>>
    >>> facts
    {'vendor': 'cisco', 'platform': '9396', 'hostname': 'nxos1', 'os': '7.0.3'}
    >>>
    >>> facts.pop('platform')
    '9396'
    >>>
    >>> print facts.get('vendor')
    cisco
    >>>
    >>> print facts.get('os_version')
    None
    >>> facts.keys()
    ['vendor', 'hostname', 'os']
    >>>
    >>> facts.values()
    ['cisco', 'nxos1', '7.0.3']
    >>>
    >>> facts.items()
    [('vendor', 'cisco'), ('hostname', 'nxos1'), ('os', '7.0.3')]

Note:
    just as you saw with strings and lists, you can use the dir() function to see the available methods and attributes of dictionaries. You can do dir(dict) or dir(var) where var is a dictionary to try it out
    all methods either return an object and/or modifies the original object. The pop method is unique in that it returns data and modifies the original object. It is very similar to the pop method for lists
    get() function is special in that it provides a cleaner output instead of an error, in case your searching for a value that doesn't exist:
        >>> facts = {'hostname': 'cisco', 'os': '7.0.2'}
        >>>
        >>> print facts['hostname']
        cisco
        >>> print facts['platform']
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        KeyError: 'platform'
        >>> print facts.get('hostname')
        cisco
        >>>
        >>> platform = facts.get('platform')
        >>> print platform
        None
        >>> platform = facts.get('platform', 'no platform key exists')
        >>>
        >>> print platform
        no platform key exists

Python loops:
    Loops allow you to execute a block of code more than once. There are two main types of loops that you will learn about: for loop and while loop
    A for loop in Python usually iterates over a given object such as any string, list, dictionary (or any other iterate object). You can easily iterate over a range of numbers
